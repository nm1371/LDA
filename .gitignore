import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
import matplotlib.pyplot as plt
from skimage import data
from scipy.sparse import identity

# 1️⃣ بارگذاری تصویر Cameraman
image_original = data.camera()

# 2️⃣ تبدیل تصویر به بردار
x = image_original.flatten()

# 3️⃣ افزودن نویز گاوسی ۵۰٪
mean = 0
std = np.std(image_original) * 0.5
noise = np.random.normal(mean, std, image_original.shape)
image_noisy = np.clip(image_original + noise, 0, 255).astype(np.uint8)

# 4️⃣ تبدیل تصویر نویزی به بردار
x_noisy = image_noisy.flatten()

import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
import matplotlib.pyplot as plt
from skimage import data, transform

# 📌 1. بارگذاری و کاهش اندازه تصویر
image_original = data.camera()
image_original = transform.resize(image_original, (128, 128), anti_aliasing=True)

# 📌 2. افزودن نویز گاوسی
noise_std = 0.1  # تنظیم شدت نویز
image_noisy = np.clip(image_original + noise_std * np.random.randn(*image_original.shape), 0, 1)

# 📌 3. تبدیل به Tensor
x_noisy = torch.tensor(image_noisy, dtype=torch.float32).unsqueeze(0).unsqueeze(0)
x_original = torch.tensor(image_original, dtype=torch.float32).unsqueeze(0).unsqueeze(0)

# 📌 4. مدل CNN ساده برای حذف نویز
class DenoisingCNN(nn.Module):
    def __init__(self):
        super(DenoisingCNN, self).__init__()
        self.conv1 = nn.Conv2d(1, 32, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(32, 32, kernel_size=3, stride=1, padding=1)
        self.conv3 = nn.Conv2d(32, 1, kernel_size=3, stride=1, padding=1)

    def forward(self, x):
        x = torch.relu(self.conv1(x))
        x = torch.relu(self.conv2(x))
        x = self.conv3(x)
        return x

# 📌 5. مقداردهی مدل
model = DenoisingCNN()
optimizer = optim.Adam(model.parameters(), lr=1e-4)
loss_fn = nn.MSELoss()

# 🎯 6. آموزش مدل به صورت دوسطحی
for epoch in range(150):
    optimizer.zero_grad()

    x_denoised = model(x_noisy)
    loss = loss_fn(x_denoised, x_original)

    loss.backward()
    optimizer.step()

    if epoch % 30 == 0:
        print(f"Epoch {epoch}: Loss = {loss.item():.4f}")

# 📊 7. نمایش تصویر حذف نویز شده
x_clean_final = model(x_noisy).detach().squeeze().numpy()

plt.figure(figsize=(10, 5))
plt.subplot(1, 3, 1)
plt.title("Original")
plt.imshow(image_original, cmap='gray')

plt.subplot(1, 3, 2)
plt.title("Noisy")
plt.imshow(image_noisy, cmap='gray')

plt.subplot(1, 3, 3)
plt.title("Denoised")
plt.imshow(x_clean_final, cmap='gray')

plt.show()

